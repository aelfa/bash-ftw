#!/bin/bash
#
# .bashrc.ftw
# author: Jonathan Tsai <hello@jontsai.com>
#
# An opinionated .bashrc file
#

# don't execute if not an interactive BASH shell
# `$-` shows `i` if an interactive shell
[[ ${-#*i} != ${-} ]] || return

KERNEL=`uname -s`

################################################################################
# BASH globals

# http://en.wikipedia.org/wiki/Umask
umask 0002

################################################################################
# BASH functions

function parse_git_branch {
    TEST_GIT_REPO=`git rev-parse 2> /dev/null > /dev/null`
    if [[ $? ]]
    then
        git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
    else
        echo ''
    fi
}

function grep-kill {
    PATTERN=$1
    ps -A | grep ${PATTERN} | grep -v grep | awk '{print $1}' | xargs kill
}

##
# Node.js
function n {
   $(npm bin)/$@
}

################################################################################
# Prompt
#
# \d - Current date
# \t - Current time
# \h - Host name
# \# - Command number
# \u - User name
# \W - Current working directory (ie: Desktop/)
# \w - Current working directory, full path (ie: /Users/Admin/Desktop)
# Default Mac Style: PS1="\h:\W \u$"
# Ubuntu Style: export PS1="\u@\h:\w$ "
export PS1="[\t] \u@\h:\w\$(parse_git_branch)$ "

################################################################################
# exports

# local scripts and /usr/local/sbin
PATH=$PATH:$HOME/bin:/usr/local/sbin
export PATH

export SVN_EDITOR=emacs
export EDITOR=emacs

export HISTTIMEFORMAT="%Y-%m-%d %T "

export CLICOLOR=1
export CLICOLOR_FORCE=1

################################################################################
# aliases

##
# basic commands
alias l='ls -CF'
alias la='ls -aF'
alias ll='ls -lhF'
alias lla='ls -lahF'
alias llt='ls -lhtF'
alias llat='ls -lahtF'
alias pu='pushd'
alias po='popd'
alias rm='rm -i'
alias cp='cp -i'
alias grep='grep --color=always'
alias lessr='less -R'
alias morer='more -R'

##
# dev
alias edithosts='sudo emacs /etc/hosts'
alias rmemacsbackups='for FILE in `find . -name "*~"`; do rm -i $FILE; done'
alias svns='svn status'

##
# Python helpers
alias rmpyc='for FILE in `find . -name "*.pyc"`; do rm -i $FILE; done'
alias venv='source ./venv/bin/activate'

##
# Git
alias gb='git branch'
alias gca='git commit -a'
alias gcb='git create-branch'
alias gcd='git checkout develop'
alias gcm='git checkout master'
alias gcp='git checkout gh-pages'
alias gdsf='git dsf'
alias glog='git log'
alias gpl='git pull'
alias gpu='git push'
alias gst='git status'
alias gitup='export GIT_TMP_BRANCH=`git rev-parse --abbrev-ref HEAD | tr -d "\n"`; git checkout master; git fetch origin; git rebase origin/master; git checkout ${GIT_TMP_BRANCH}'
alias gitdeletemerged="git branch --merged master | grep -v 'master$' | xargs git branch -d"

function gitdeletenonmaster {
    for branch in `git branch | awk '{ print $1}' | grep -v '^*'`; do if [[ "$branch" != "master" ]]; then git branch -D $branch; fi; done
}

##
# utils
alias jq='jq -C'
alias json='python -mjson.tool'
alias keyup='. ssh-agent-init;ssh-keychain-init'
. ssh-agent-init

##
# Docker
alias dcdu='docker-compose down --remove-orphans;docker-compose up -d'

################################################################################
# directories

alias bin='cd ~/bin'
alias code='cd ~/code'
alias dload='cd ~/dload'
alias temp='cd ~/tmp'
alias www='cd ~/www'

################################################################################
# source other .bashrc files

# Linux
[[ $KERNEL == 'Linux' ]] && [[ -s "$HOME/.bashrc.ftw.linux" ]] && source "$HOME/.bashrc.ftw.linux"

# Mac
[[ $KERNEL == 'Darwin' ]] && [[ -s "$HOME/.bashrc.ftw.mac" ]] && source "$HOME/.bashrc.ftw.mac"

# User .bashrc
[[ -s "$HOME/.bashrc.$USER" ]] && source "$HOME/.bashrc.$USER"

# Bash completion support for Git. Based on https://github.com/git/git/blob/master/contrib/completion/git-completion.bash
[[ -s "$HOME/.git-completion.bash" ]] && source "$HOME/.git-completion.bash"

# Load various .bashrc.* customizations
# Define BASHRC_GROUPS as an export in the .bashrc.$USER file
for group in ${BASHRC_GROUPS}
do
    BASHRC_FILE="$HOME/.bashrc.${group}"
    [[ -s $BASHRC_FILE ]] && source ${BASHRC_FILE}
done
